// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/common.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/atye/gosrsbox/internal/common"
	models "github.com/atye/gosrsbox/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRequestExecutor is a mock of RequestExecutor interface.
type MockRequestExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockRequestExecutorMockRecorder
}

// MockRequestExecutorMockRecorder is the mock recorder for MockRequestExecutor.
type MockRequestExecutorMockRecorder struct {
	mock *MockRequestExecutor
}

// NewMockRequestExecutor creates a new mock instance.
func NewMockRequestExecutor(ctrl *gomock.Controller) *MockRequestExecutor {
	mock := &MockRequestExecutor{ctrl: ctrl}
	mock.recorder = &MockRequestExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestExecutor) EXPECT() *MockRequestExecutorMockRecorder {
	return m.recorder
}

// ExecuteItemsRequest mocks base method.
func (m *MockRequestExecutor) ExecuteItemsRequest(arg0 context.Context, arg1 common.Params) (common.ItemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteItemsRequest", arg0, arg1)
	ret0, _ := ret[0].(common.ItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteItemsRequest indicates an expected call of ExecuteItemsRequest.
func (mr *MockRequestExecutorMockRecorder) ExecuteItemsRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteItemsRequest", reflect.TypeOf((*MockRequestExecutor)(nil).ExecuteItemsRequest), arg0, arg1)
}

// ExecuteMonstersRequest mocks base method.
func (m *MockRequestExecutor) ExecuteMonstersRequest(arg0 context.Context, arg1 common.Params) (common.MonstersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteMonstersRequest", arg0, arg1)
	ret0, _ := ret[0].(common.MonstersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteMonstersRequest indicates an expected call of ExecuteMonstersRequest.
func (mr *MockRequestExecutorMockRecorder) ExecuteMonstersRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteMonstersRequest", reflect.TypeOf((*MockRequestExecutor)(nil).ExecuteMonstersRequest), arg0, arg1)
}

// ExecutePrayersRequest mocks base method.
func (m *MockRequestExecutor) ExecutePrayersRequest(arg0 context.Context, arg1 common.Params) (common.PrayersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePrayersRequest", arg0, arg1)
	ret0, _ := ret[0].(common.PrayersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePrayersRequest indicates an expected call of ExecutePrayersRequest.
func (mr *MockRequestExecutorMockRecorder) ExecutePrayersRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePrayersRequest", reflect.TypeOf((*MockRequestExecutor)(nil).ExecutePrayersRequest), arg0, arg1)
}

// MockMetaGetter is a mock of MetaGetter interface.
type MockMetaGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetaGetterMockRecorder
}

// MockMetaGetterMockRecorder is the mock recorder for MockMetaGetter.
type MockMetaGetterMockRecorder struct {
	mock *MockMetaGetter
}

// NewMockMetaGetter creates a new mock instance.
func NewMockMetaGetter(ctrl *gomock.Controller) *MockMetaGetter {
	mock := &MockMetaGetter{ctrl: ctrl}
	mock.recorder = &MockMetaGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaGetter) EXPECT() *MockMetaGetterMockRecorder {
	return m.recorder
}

// GetMaxResults mocks base method.
func (m *MockMetaGetter) GetMaxResults() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxResults")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxResults indicates an expected call of GetMaxResults.
func (mr *MockMetaGetterMockRecorder) GetMaxResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxResults", reflect.TypeOf((*MockMetaGetter)(nil).GetMaxResults))
}

// GetTotal mocks base method.
func (m *MockMetaGetter) GetTotal() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockMetaGetterMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockMetaGetter)(nil).GetTotal))
}

// MockItemsResponse is a mock of ItemsResponse interface.
type MockItemsResponse struct {
	ctrl     *gomock.Controller
	recorder *MockItemsResponseMockRecorder
}

// MockItemsResponseMockRecorder is the mock recorder for MockItemsResponse.
type MockItemsResponseMockRecorder struct {
	mock *MockItemsResponse
}

// NewMockItemsResponse creates a new mock instance.
func NewMockItemsResponse(ctrl *gomock.Controller) *MockItemsResponse {
	mock := &MockItemsResponse{ctrl: ctrl}
	mock.recorder = &MockItemsResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsResponse) EXPECT() *MockItemsResponseMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockItemsResponse) GetItems() []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemsResponseMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemsResponse)(nil).GetItems))
}

// GetMaxResults mocks base method.
func (m *MockItemsResponse) GetMaxResults() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxResults")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxResults indicates an expected call of GetMaxResults.
func (mr *MockItemsResponseMockRecorder) GetMaxResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxResults", reflect.TypeOf((*MockItemsResponse)(nil).GetMaxResults))
}

// GetTotal mocks base method.
func (m *MockItemsResponse) GetTotal() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockItemsResponseMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockItemsResponse)(nil).GetTotal))
}

// MockMonstersResponse is a mock of MonstersResponse interface.
type MockMonstersResponse struct {
	ctrl     *gomock.Controller
	recorder *MockMonstersResponseMockRecorder
}

// MockMonstersResponseMockRecorder is the mock recorder for MockMonstersResponse.
type MockMonstersResponseMockRecorder struct {
	mock *MockMonstersResponse
}

// NewMockMonstersResponse creates a new mock instance.
func NewMockMonstersResponse(ctrl *gomock.Controller) *MockMonstersResponse {
	mock := &MockMonstersResponse{ctrl: ctrl}
	mock.recorder = &MockMonstersResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonstersResponse) EXPECT() *MockMonstersResponseMockRecorder {
	return m.recorder
}

// GetMaxResults mocks base method.
func (m *MockMonstersResponse) GetMaxResults() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxResults")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxResults indicates an expected call of GetMaxResults.
func (mr *MockMonstersResponseMockRecorder) GetMaxResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxResults", reflect.TypeOf((*MockMonstersResponse)(nil).GetMaxResults))
}

// GetMonsters mocks base method.
func (m *MockMonstersResponse) GetMonsters() []models.Monster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonsters")
	ret0, _ := ret[0].([]models.Monster)
	return ret0
}

// GetMonsters indicates an expected call of GetMonsters.
func (mr *MockMonstersResponseMockRecorder) GetMonsters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonsters", reflect.TypeOf((*MockMonstersResponse)(nil).GetMonsters))
}

// GetTotal mocks base method.
func (m *MockMonstersResponse) GetTotal() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockMonstersResponseMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockMonstersResponse)(nil).GetTotal))
}

// MockPrayersResponse is a mock of PrayersResponse interface.
type MockPrayersResponse struct {
	ctrl     *gomock.Controller
	recorder *MockPrayersResponseMockRecorder
}

// MockPrayersResponseMockRecorder is the mock recorder for MockPrayersResponse.
type MockPrayersResponseMockRecorder struct {
	mock *MockPrayersResponse
}

// NewMockPrayersResponse creates a new mock instance.
func NewMockPrayersResponse(ctrl *gomock.Controller) *MockPrayersResponse {
	mock := &MockPrayersResponse{ctrl: ctrl}
	mock.recorder = &MockPrayersResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrayersResponse) EXPECT() *MockPrayersResponseMockRecorder {
	return m.recorder
}

// GetMaxResults mocks base method.
func (m *MockPrayersResponse) GetMaxResults() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxResults")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxResults indicates an expected call of GetMaxResults.
func (mr *MockPrayersResponseMockRecorder) GetMaxResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxResults", reflect.TypeOf((*MockPrayersResponse)(nil).GetMaxResults))
}

// GetPrayers mocks base method.
func (m *MockPrayersResponse) GetPrayers() []models.Prayer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrayers")
	ret0, _ := ret[0].([]models.Prayer)
	return ret0
}

// GetPrayers indicates an expected call of GetPrayers.
func (mr *MockPrayersResponseMockRecorder) GetPrayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrayers", reflect.TypeOf((*MockPrayersResponse)(nil).GetPrayers))
}

// GetTotal mocks base method.
func (m *MockPrayersResponse) GetTotal() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockPrayersResponseMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockPrayersResponse)(nil).GetTotal))
}
