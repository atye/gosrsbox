/*
 * osrsbox-api
 *
 * An open, free, complete and up-to-date RESTful API for Old School RuneScape (OSRS) items, monsters and prayers.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MonsterDrops struct for MonsterDrops
type MonsterDrops struct {
	// The ID number of the item drop.
	Id int32 `json:"id"`
	// The name of the item drop.
	Name string `json:"name"`
	// If the drop is a members-only item.
	Members bool `json:"members"`
	// The quantity of the item drop (integer, comma-separated or range).
	Quantity NullableString `json:"quantity"`
	// If the item drop is noted, or not.
	Noted bool `json:"noted"`
	// The rarity of the item drop (as a float out of 1.0).
	Rarity float32 `json:"rarity"`
	// Number of rolls from the drop.
	Rolls int32 `json:"rolls"`
}

// NewMonsterDrops instantiates a new MonsterDrops object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonsterDrops(id int32, name string, members bool, quantity NullableString, noted bool, rarity float32, rolls int32, ) *MonsterDrops {
	this := MonsterDrops{}
	this.Id = id
	this.Name = name
	this.Members = members
	this.Quantity = quantity
	this.Noted = noted
	this.Rarity = rarity
	this.Rolls = rolls
	return &this
}

// NewMonsterDropsWithDefaults instantiates a new MonsterDrops object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonsterDropsWithDefaults() *MonsterDrops {
	this := MonsterDrops{}
	return &this
}

// GetId returns the Id field value
func (o *MonsterDrops) GetId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MonsterDrops) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MonsterDrops) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonsterDrops) SetName(v string) {
	o.Name = v
}

// GetMembers returns the Members field value
func (o *MonsterDrops) GetMembers() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetMembersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Members, true
}

// SetMembers sets field value
func (o *MonsterDrops) SetMembers(v bool) {
	o.Members = v
}

// GetQuantity returns the Quantity field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MonsterDrops) GetQuantity() string {
	if o == nil || o.Quantity.Get() == nil {
		var ret string
		return ret
	}

	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonsterDrops) GetQuantityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// SetQuantity sets field value
func (o *MonsterDrops) SetQuantity(v string) {
	o.Quantity.Set(&v)
}

// GetNoted returns the Noted field value
func (o *MonsterDrops) GetNoted() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Noted
}

// GetNotedOk returns a tuple with the Noted field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetNotedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Noted, true
}

// SetNoted sets field value
func (o *MonsterDrops) SetNoted(v bool) {
	o.Noted = v
}

// GetRarity returns the Rarity field value
func (o *MonsterDrops) GetRarity() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Rarity
}

// GetRarityOk returns a tuple with the Rarity field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetRarityOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rarity, true
}

// SetRarity sets field value
func (o *MonsterDrops) SetRarity(v float32) {
	o.Rarity = v
}

// GetRolls returns the Rolls field value
func (o *MonsterDrops) GetRolls() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Rolls
}

// GetRollsOk returns a tuple with the Rolls field value
// and a boolean to check if the value has been set.
func (o *MonsterDrops) GetRollsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rolls, true
}

// SetRolls sets field value
func (o *MonsterDrops) SetRolls(v int32) {
	o.Rolls = v
}

func (o MonsterDrops) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["members"] = o.Members
	}
	if true {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if true {
		toSerialize["noted"] = o.Noted
	}
	if true {
		toSerialize["rarity"] = o.Rarity
	}
	if true {
		toSerialize["rolls"] = o.Rolls
	}
	return json.Marshal(toSerialize)
}

type NullableMonsterDrops struct {
	value *MonsterDrops
	isSet bool
}

func (v NullableMonsterDrops) Get() *MonsterDrops {
	return v.value
}

func (v *NullableMonsterDrops) Set(val *MonsterDrops) {
	v.value = val
	v.isSet = true
}

func (v NullableMonsterDrops) IsSet() bool {
	return v.isSet
}

func (v *NullableMonsterDrops) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonsterDrops(val *MonsterDrops) *NullableMonsterDrops {
	return &NullableMonsterDrops{value: val, isSet: true}
}

func (v NullableMonsterDrops) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonsterDrops) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


