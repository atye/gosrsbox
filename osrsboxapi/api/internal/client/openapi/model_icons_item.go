/*
 * osrsbox-api
 *
 * An open, free, complete and up-to-date RESTful API for Old School RuneScape (OSRS) items, monsters and prayers.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IconsItem struct for IconsItem
type IconsItem struct {
	// Unique OSRS item ID number.
	Id int32 `json:"id"`
	// The icon image (in base64 encoding) of the item.
	Icon string `json:"icon"`
}

// NewIconsItem instantiates a new IconsItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIconsItem(id int32, icon string, ) *IconsItem {
	this := IconsItem{}
	this.Id = id
	this.Icon = icon
	return &this
}

// NewIconsItemWithDefaults instantiates a new IconsItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconsItemWithDefaults() *IconsItem {
	this := IconsItem{}
	return &this
}

// GetId returns the Id field value
func (o *IconsItem) GetId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IconsItem) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IconsItem) SetId(v int32) {
	o.Id = v
}

// GetIcon returns the Icon field value
func (o *IconsItem) GetIcon() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *IconsItem) GetIconOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *IconsItem) SetIcon(v string) {
	o.Icon = v
}

func (o IconsItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["icon"] = o.Icon
	}
	return json.Marshal(toSerialize)
}

type NullableIconsItem struct {
	value *IconsItem
	isSet bool
}

func (v NullableIconsItem) Get() *IconsItem {
	return v.value
}

func (v *NullableIconsItem) Set(val *IconsItem) {
	v.value = val
	v.isSet = true
}

func (v NullableIconsItem) IsSet() bool {
	return v.isSet
}

func (v *NullableIconsItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconsItem(val *IconsItem) *NullableIconsItem {
	return &NullableIconsItem{value: val, isSet: true}
}

func (v NullableIconsItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconsItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


