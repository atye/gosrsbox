/*
 * osrsbox-api
 *
 * An open, free, complete and up-to-date RESTful API for Old School RuneScape (OSRS) items, monsters and prayers.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemWeapon The weapon bonuses including attack speed, type and stance.
type ItemWeapon struct {
	// The attack speed of a weapon (in game ticks).
	AttackSpeed int32 `json:"attack_speed"`
	// The weapon classification (e.g., axes)
	WeaponType string `json:"weapon_type"`
	// An array of weapon stance information.
	Stances []ItemWeaponStances `json:"stances"`
}

// NewItemWeapon instantiates a new ItemWeapon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemWeapon(attackSpeed int32, weaponType string, stances []ItemWeaponStances, ) *ItemWeapon {
	this := ItemWeapon{}
	this.AttackSpeed = attackSpeed
	this.WeaponType = weaponType
	this.Stances = stances
	return &this
}

// NewItemWeaponWithDefaults instantiates a new ItemWeapon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWeaponWithDefaults() *ItemWeapon {
	this := ItemWeapon{}
	return &this
}

// GetAttackSpeed returns the AttackSpeed field value
func (o *ItemWeapon) GetAttackSpeed() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AttackSpeed
}

// GetAttackSpeedOk returns a tuple with the AttackSpeed field value
// and a boolean to check if the value has been set.
func (o *ItemWeapon) GetAttackSpeedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttackSpeed, true
}

// SetAttackSpeed sets field value
func (o *ItemWeapon) SetAttackSpeed(v int32) {
	o.AttackSpeed = v
}

// GetWeaponType returns the WeaponType field value
func (o *ItemWeapon) GetWeaponType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.WeaponType
}

// GetWeaponTypeOk returns a tuple with the WeaponType field value
// and a boolean to check if the value has been set.
func (o *ItemWeapon) GetWeaponTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WeaponType, true
}

// SetWeaponType sets field value
func (o *ItemWeapon) SetWeaponType(v string) {
	o.WeaponType = v
}

// GetStances returns the Stances field value
func (o *ItemWeapon) GetStances() []ItemWeaponStances {
	if o == nil  {
		var ret []ItemWeaponStances
		return ret
	}

	return o.Stances
}

// GetStancesOk returns a tuple with the Stances field value
// and a boolean to check if the value has been set.
func (o *ItemWeapon) GetStancesOk() (*[]ItemWeaponStances, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Stances, true
}

// SetStances sets field value
func (o *ItemWeapon) SetStances(v []ItemWeaponStances) {
	o.Stances = v
}

func (o ItemWeapon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attack_speed"] = o.AttackSpeed
	}
	if true {
		toSerialize["weapon_type"] = o.WeaponType
	}
	if true {
		toSerialize["stances"] = o.Stances
	}
	return json.Marshal(toSerialize)
}

type NullableItemWeapon struct {
	value *ItemWeapon
	isSet bool
}

func (v NullableItemWeapon) Get() *ItemWeapon {
	return v.value
}

func (v *NullableItemWeapon) Set(val *ItemWeapon) {
	v.value = val
	v.isSet = true
}

func (v NullableItemWeapon) IsSet() bool {
	return v.isSet
}

func (v *NullableItemWeapon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemWeapon(val *ItemWeapon) *NullableItemWeapon {
	return &NullableItemWeapon{value: val, isSet: true}
}

func (v NullableItemWeapon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemWeapon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


